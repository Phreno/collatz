#!/usr/bin/env coffee

# Développeur ....: K3rn€l_P4n1K
# Nom ............: collatz
# Description ....: applique sur un nombre l'hypothèse de collatz
# Version ........: 1.0
# Date ...........: dimanche 16 avril 2017, 15:08:46 (UTC+0200)
# Dépendances ....: CoffeeScript version 1.10.0

# Fonctionnalité .: boucle jusqu'à tomber sur un nombre déjà rencontré
# Intention ......: voir les étapes appliquées sur des nombres premiers
# Remarque .......: N/A

# ===========================
# Copyright 2017 K3rn€l P4n1k
# ===========================
#
# collatz is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# collatz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with collatz. If not, see <http://www.gnu.org/licenses/>.

# ===================================
# Déclaration des valeurs par défault
# ===================================
DEFAULT=
  maxSteps: 5000
  slope:3
  intercept:1
  divider:2

# ===========================
# Configuration de la routine
# ===========================
VENDOR = { program: require 'commander' }
VENDOR.program.version 'α'
VENDOR.program.usage '-s <seed> [options]'
VENDOR.program.option '-s, --seed [int]', "Nombre à décomposer [int]"
VENDOR.program.option '-m, --maxSteps [int]', "Nombre d'étapes maximum [#{DEFAULT.maxSteps}]", DEFAULT.maxSteps
VENDOR.program.option '-s, --slope [int]', "Coefficiant directeur [#{DEFAULT.slope}]", DEFAULT.slope
VENDOR.program.option '-i, --intercept [int]', "Ordonnées à l'origine [#{DEFAULT.intercept}]", DEFAULT.intercept
VENDOR.program.option '-d, --divider [int]', "Diviseur [#{DEFAULT.divider}]", DEFAULT.divider
VENDOR.program.parse process.argv

if !VENDOR.program.seed
  VENDOR.program.help()

# ===================================
# Contexte d'exécution de la fonction
# ===================================
CONTEXT =
  # Historique des résultats rencontrés lors de la décomposition du nombre
  iterations:[]

  # Fonction à appliquer lorsque le nombre est pair
  evenFunction:(x)-> x / VENDOR.program.divider

  # Foncction à appliquer lorsque le nombre est impair
  oddFunction:(x)-> VENDOR.program.slope * x + VENDOR.program.intercept

  # Vérifie l'unicité des résultats rencontrés
  noLoop: (history, x)-> history.indexOf(x) is -1

  # Historise les étapes de décomposition
  memorize: (history, x)-> history.push x

  # Vérifie la limite des étapes de décomposition
  outOfLimit: (history)-> history.length > VENDOR.program.maxSteps

  # Indique le dépassement de la limite
  terminator:"[#{VENDOR.program.maxSteps}+]"

  # Préviens l'utilisateur que la limite est rencontrée
  warnLimit: ()-> console.log "/!\\ #{VENDOR.program.maxSteps}+ steps"

  # Calcul la valeur de la prochaine itération
  getNext: (x, oddFunc, evenFunc)->
    even = (x % 2) is 0
    if even is true then x = evenFunc x
    else x = oddFunc x

  # Affiche le résultat f$inal
  displayResult: (history)-> console.log history.join (";")

# ============================================
# Fonction implémantant l'hypothèse de collatz
# ============================================
collatz = (number) ->
  iterate = (seed) ->
    iteration = seed
    while CONTEXT.noLoop( CONTEXT.iterations, iteration )
      if CONTEXT.outOfLimit( CONTEXT.iterations )
        CONTEXT.warnLimit()
        iteration = CONTEXT.terminator
        break
      CONTEXT.memorize( CONTEXT.iterations, iteration )
      iteration = CONTEXT.getNext( iteration, CONTEXT.oddFunction, CONTEXT.evenFunction )
    iteration

  CONTEXT.memorize( CONTEXT.iterations, "##{iterate number}" )
  CONTEXT.displayResult(CONTEXT.iterations)

# =======================
# Lancement de la routine
# =======================

collatz VENDOR.program.seed
